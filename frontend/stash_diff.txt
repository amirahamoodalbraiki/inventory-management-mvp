diff --git a/frontend/src/pages/AddProduct.jsx b/frontend/src/pages/AddProduct.jsx
index 14ff886..dd1935b 100644
--- a/frontend/src/pages/AddProduct.jsx
+++ b/frontend/src/pages/AddProduct.jsx
@@ -28,6 +28,22 @@ export default function AddProduct() {
   const [saving, setSaving] = useState(false);
   const fileInputRef = useRef(null);
 
+  const [errors, setErrors] = useState({});
+
+const validate = (f) => {
+  const e = {};
+  if (!f.name.trim()) e.name = "Name is required";
+  if (!f.sku.trim()) e.sku = "SKU is required";
+  if (!f.category) e.category = "Pick a category";
+  if (f.unitPrice === "" || Number.isNaN(Number(f.unitPrice)) || Number(f.unitPrice) < 0)
+    e.unitPrice = "Unit price must be a number ≥ 0";
+  if (f.quantity === "" || !Number.isInteger(Number(f.quantity)) || Number(f.quantity) < 0)
+    e.quantity = "Quantity must be an integer ≥ 0";
+  if (f.lowStockThreshold === "" || !Number.isInteger(Number(f.lowStockThreshold)) || Number(f.lowStockThreshold) < 0)
+    e.lowStockThreshold = "Low-stock threshold must be an integer ≥ 0";
+  return e;
+};
+
   const update = (key) => (e) => setForm((f) => ({ ...f, [key]: e.target.value }));
 
   const onDrop = (e) => {
@@ -57,44 +73,36 @@ export default function AddProduct() {
     form.category &&
     !saving;
 
-  const handleSave = async () => {
-    if (!canSave) return;
-    setSaving(true);
-    try {
-      // payload
-      const payload = {
-        name: form.name.trim(),
-        sku: form.sku.trim(),
-        category: form.category,
-        description: form.description.trim(),
-        unitPrice: parseFloat(form.unitPrice || "0") || 0,
-        quantity: parseInt(form.quantity || "0", 10) || 0,
-        lowStockThreshold: parseInt(form.lowStockThreshold || "0", 10) || 0,
-        imageName: imageFile?.name || null,
-      };
-
-      // If your service exists, use it; else just log.
-      if (inventoryService?.createProduct) {
+    const handleSave = async () => {
+      const e = validate(form);
+      setErrors(e);
+      if (Object.keys(e).length > 0) return; // stop if errors
+    
+      setSaving(true);
+      try {
+        const payload = {
+          name: form.name.trim(),
+          sku: form.sku.trim(),
+          category: form.category,
+          description: form.description.trim(),
+          unitPrice: Number(form.unitPrice || 0),
+          quantity: Number.parseInt(form.quantity || "0", 10),
+          lowStockThreshold: Number.parseInt(form.lowStockThreshold || "0", 10),
+        };
+    
         await inventoryService.createProduct(payload, imageFile);
-      } else {
-        console.log("Mock createProduct()", payload, imageFile);
+    
+        alert("Product created!");
+        // navigate("/")  <-- if you want to go back to list
+        setForm({ name:"", sku:"", category:"", description:"", unitPrice:"", quantity:"", lowStockThreshold:"" });
+        clearImage();
+      } catch (err) {
+        console.error(err);
+        alert("Save failed. Check fields and try again.");
+      } finally {
+        setSaving(false);
       }
-
-      alert("Product created!");
-      // Optional: navigate back to Products
-      // navigate("/products")
-      setForm({
-        name: "", sku: "", category: "", description: "",
-        unitPrice: "", quantity: "", lowStockThreshold: "",
-      });
-      clearImage();
-    } catch (e) {
-      console.error(e);
-      alert("Save failed. Try again.");
-    } finally {
-      setSaving(false);
-    }
-  };
+    };
 
   const handleCancel = () => {
     // If you have routing, navigate back; else just reset.
diff --git a/frontend/src/pages/InventoryList.jsx b/frontend/src/pages/InventoryList.jsx
index 48ad3cb..be3b731 100644
--- a/frontend/src/pages/InventoryList.jsx
+++ b/frontend/src/pages/InventoryList.jsx
@@ -110,6 +110,7 @@ export default function InventoryList() {
   const navigate = useNavigate();
 
   const handleAddProduct = () => {
+
     navigate("/products/new");
   };
 
diff --git a/frontend/src/services/inventory.js b/frontend/src/services/inventory.js
index 8d165f2..d9f7bae 100644
--- a/frontend/src/services/inventory.js
+++ b/frontend/src/services/inventory.js
@@ -1,79 +1,58 @@
 // Inventory API service - can be easily replaced with real backend calls
-const MOCK_DATA = [
-  { id: 1, name: "Eco-Friendly Bamboo Toothbrush", sku: "TB-001", category: "Personal Care", quantity: 150 },
-  { id: 2, name: "Organic Cotton Reusable Shopping Bag", sku: "RB-002", category: "Home Goods", quantity: 25 },
-  { id: 3, name: "Stainless Steel Water Bottle", sku: "WB-003", category: "Outdoor Gear", quantity: 50 },
-  { id: 4, name: "Recycled Paper Notebook", sku: "NB-004", category: "Stationery", quantity: 100 },
-  { id: 5, name: "Solar-Powered Garden Lights", sku: "GL-005", category: "Home & Garden", quantity: 10 },
-  { id: 6, name: "Biodegradable Phone Case", sku: "PC-006", category: "Electronics", quantity: 75 },
-  { id: 7, name: "Upcycled Denim Tote Bag", sku: "TB-007", category: "Fashion", quantity: 5 },
-  { id: 8, name: "Natural Beeswax Food Wraps", sku: "FW-008", category: "Kitchen", quantity: 30 },
-  { id: 9, name: "Bamboo Cutting Board", sku: "CB-009", category: "Kitchen", quantity: 20 },
-  { id: 10, name: "Reusable Silicone Straws", sku: "SS-010", category: "Kitchen", quantity: 40 },
-  { id: 11, name: "Organic Cotton Face Mask", sku: "FM-011", category: "Personal Care", quantity: 15, lowStockStatus: "Low-stock" },
-  { id: 12, name: "LED Desk Lamp", sku: "DL-012", category: "Office", quantity: 60, lowStockStatus: "In-stock" },
-  { id: 13, name: "Handmade Ceramic Mug", sku: "CM-013", category: "Kitchen", quantity: 12, lowStockStatus: "Low-stock" },
-  { id: 14, name: "Wireless Mouse", sku: "WM-014", category: "Electronics", quantity: 80, lowStockStatus: "In-stock" },
-  { id: 15, name: "Portable Power Bank", sku: "PB-015", category: "Electronics", quantity: 5, lowStockStatus: "Out-of-stock" },
-  { id: 16, name: "Wooden Salad Bowl", sku: "SB-016", category: "Kitchen", quantity: 22, lowStockStatus: "Low-stock" },
-  { id: 17, name: "Stainless Steel Lunch Box", sku: "LB-017", category: "Kitchen", quantity: 95, lowStockStatus: "In-stock" },
-  { id: 18, name: "Cotton Bath Towel", sku: "BT-018", category: "Home Goods", quantity: 35, lowStockStatus: "In-stock" },
-  { id: 19, name: "Yoga Mat", sku: "YM-019", category: "Fitness", quantity: 8, lowStockStatus: "Low-stock" },
-  { id: 20, name: "Bluetooth Headphones", sku: "BH-020", category: "Electronics", quantity: 0, lowStockStatus: "Out-of-stock" }
-];
+import { api } from './api';
+
+
 
 // Simulate API delay
 const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
 
-// Helper function to determine stock status
-const getStockStatus = (quantity) => {
+
+// src/services/inventory.js
+const getStockStatus = (quantity, lowStockThreshold = 10) => {
   if (quantity === 0) return 'out';
-  if (quantity < 10) return 'low';
+  if (quantity <= lowStockThreshold) return 'low';
   return 'in';
 };
+export { getStockStatus };
 
 export const inventoryService = {
-  // Main method: get filtered inventory items with all params
-  async getInventoryItems(params = {}) {
-    await delay(300); // Simulate network delay
-    
-    const { search = '', category = 'all', stockStatus = 'all' } = params;
-    let filtered = MOCK_DATA;
-
-    // Apply search filter
-    if (search.trim()) {
-      const searchTerm = search.trim().toLowerCase();
-      filtered = filtered.filter(item => 
-        item.name.toLowerCase().includes(searchTerm) ||
-        item.sku.toLowerCase().includes(searchTerm)
-      );
-    }
 
-    // Apply category filter
-    if (category !== 'all') {
-      filtered = filtered.filter(item => item.category === category);
-    }
+  // GET /api/products?search=&category=
+  async getInventoryItems({ category = 'all', stockStatus = 'all', search = '' } = {}) {
+    const params = new URLSearchParams();
+    if (search) params.set('search', search);
+    if (category && category !== 'all') params.set('category', category);
 
-    // Apply stock status filter
+    const data = await api.get(`/products${params.toString() ? `?${params}` : ''}`);
+
+    // If backend doesn’t filter by stock status, filter on the client:
     if (stockStatus !== 'all') {
-      filtered = filtered.filter(item => {
-        const status = getStockStatus(item.quantity);
-        return status === stockStatus;
+      return data.filter((p) => {
+        const status = getStockStatus(p.quantity, p.lowStockThreshold ?? 5);
+        if (stockStatus === 'in-stock') return status === 'in';
+        if (stockStatus === 'low-stock') return status === 'low';
+        if (stockStatus === 'out-of-stock') return status === 'out';
+        return true;
       });
     }
-
-    return filtered;
+    return data;
   },
 
-  // Get unique categories for filter dropdown
-  async getCategories() {
-    await delay(100);
-    const categories = [...new Set(MOCK_DATA.map(item => item.category))];
-    return categories;
+
+   // If you don’t have /categories, derive from products
+   async getCategories() {
+    try {
+      const data = await api.get('/categories'); // if your backend has it
+      return data;
+    } catch {
+      // Fallback: build unique categories from products
+      const products = await api.get('/products');
+      return Array.from(new Set(products.map((p) => p.category))).sort();
+    }
   },
 
   // Add new inventory item (for future use)
-  async addInventoryItem(item) {
+  /*async addInventoryItem(item) {
     await delay(500);
     const newItem = {
       id: Date.now(),
@@ -82,57 +61,39 @@ export const inventoryService = {
     };
     MOCK_DATA.push(newItem);
     return newItem;
-  },
+  },*/
 
-  // Update inventory item (for future use)
-  async updateInventoryItem(id, updates) {
-    await delay(400);
-    const index = MOCK_DATA.findIndex(item => item.id === id);
-    if (index !== -1) {
-      MOCK_DATA[index] = { ...MOCK_DATA[index], ...updates };
-      return MOCK_DATA[index];
+  // POST /products  (JSON or multipart if image)
+  async createProduct(payload, imageFile) {
+    const body = {
+      name: payload.name,
+      sku: payload.sku,
+      category: payload.category,
+      description: payload.description,
+      unitPrice: payload.unitPrice,      
+      quantity: payload.quantity,
+      lowStockThreshold: payload.lowStockThreshold, 
+    };
+  
+    if (imageFile) {
+      const fd = new FormData();
+      Object.entries(body).forEach(([k, v]) => fd.append(k, v));
+      fd.append("image", imageFile);
+      return api.postFormData('/products', fd);
     }
-    throw new Error('Item not found');
+  
+    return api.postJson('/products', body);
   },
 
-  // Delete inventory item (for future use)
-  async deleteInventoryItem(id) {
-    await delay(300);
-    const index = MOCK_DATA.findIndex(item => item.id === id);
-    if (index !== -1) {
-      MOCK_DATA.splice(index, 1);
-      return true;
-    }
-    throw new Error('Item not found');
-  }
-};
 
-// Helper function to get status badge data
-export const getStatusBadgeData = (status) => {
-  switch (status) {
-    case 'low':
-      return {
-        text: 'Low',
-        color: '#7a2e0e',
-        background: '#FEF0C7',
-        border: '#FEDF89'
-      };
-    case 'out':
-      return {
-        text: 'Out',
-        color: '#B42318',
-        background: '#FEE4E2',
-        border: '#FDA29B'
-      };
-    default:
-      return {
-        text: 'In stock',
-        color: '#667085',
-        background: '#F2F4F7',
-        border: '#E4E7EC'
-      };
-  }
-};
 
-// Helper function to determine stock status (exported for component use)
-export { getStockStatus }; 
\ No newline at end of file
+ 
+  async updateProduct(id, payload) {
+    return api.putJson(`/products/${id}`, payload);
+  },
+
+
+async deleteProduct(id) {
+  return api.del(`/products/${id}`);
+},
+};
\ No newline at end of file
diff --git a/frontend/vite.config.js b/frontend/vite.config.js
index 8b0f57b..a94c9a0 100644
--- a/frontend/vite.config.js
+++ b/frontend/vite.config.js
@@ -4,4 +4,12 @@ import react from '@vitejs/plugin-react'
 // https://vite.dev/config/
 export default defineConfig({
   plugins: [react()],
+  server: {
+    proxy: {
+      '/products': {
+        target: 'http://localhost:8080',
+        changeOrigin: true,
+      },
+    },
+  },
 })
